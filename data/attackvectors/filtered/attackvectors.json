[
 {
  "avId": "AV-000",
  "avName": "Conduct Open-Source Supply Chain Attack",
  "info": [
   {
    "Description": "The attack tree focuses on open-source based software development practices, which involve the consumption of numerous open-source components throughout the entire development lifecycle, spanning from IDE plugins, test frameworks and build tools to runtime dependencies. In this context, the attacker's top-level goal is to place malicious code in open-source artifacts such that it is executed in the context of downstream projects, e.g., during its development or runtime. Such malware can exfiltrate data, represent or open a backdoor, as well as download and execute second-stage payload. Targeted assets can belong both to developers of downstream software projects, or their end-users, depending on the attacker's specific intention. However, the focus of this taxonomy is not on what malicious code does, but how attackers place it in upstream projects. Attackers can target any kind of project (e.g. libraries or word processors), direct or indirect downstream consumers, as many as possible, or very specific ones. The latter is possible by conditioning the execution of malicious code, e.g. on the lifecycle phase (install, test, etc.), application state, operating system, or properties of the downstream component it has been integrated into. Note that infections are not limited to adding malicious executable program code, but can also comprise insecure defaults, the re-introduction of previsously fixed vulnerabilities, the removal of authorization checks, the introduction of new dependencies (on attacker-controlled packages), tests, etc.",
    "Impact": "Conduct a Software Supply Chain attack",
    "Mapped Safeguard": [
     {
      "sgId": "SG-001"
     },
     {
      "sgId": "SG-002"
     },
     {
      "sgId": "SG-003"
     },
     {
      "sgId": "SG-005"
     },
     {
      "sgId": "SG-006"
     },
     {
      "sgId": "SG-010"
     },
     {
      "sgId": "SG-013"
     },
     {
      "sgId": "SG-014"
     },
     {
      "sgId": "SG-023"
     },
     {
      "sgId": "SG-024"
     },
     {
      "sgId": "SG-025"
     },
     {
      "sgId": "SG-026"
     },
     {
      "sgId": "SG-036"
     },
     {
      "sgId": "SG-039"
     }
    ]
   }
  ]
 },
 {
  "avId": "AV-201",
  "avName": "Combosquatting",
  "info": [
   {
    "Description": "Combosquatting consists of creating a package name containing pre or post-fix additions to the name of a benign package. The attacker can use naming patterns that are common to general development practices (e.g., the addition of \"-dev\" or \"-rc\"), given ecosystems (e.g., the addition of \"3\" to suggest compatibility with Python 3) or indicate platform compatibility (e.g. \"i386\").",
    "Impact": "Create name confusion, resulting in the installation of a malicious package",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-202",
  "avName": "Altering Word Order",
  "info": [
   {
    "Description": "If the name of legitimate packages comprises multiple words, e.g. separated by hyphens or using camel case notation, this technique consists of re-arranging those words in a different order (for example \"test-vision-client\" instead of \"test-client-vision\")",
    "Impact": "Create name confusion, resulting in the installation of a malicious package",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-203",
  "avName": "Manipulating Word Separators",
  "info": [
   {
    "Description": "This technique consists of adding or altering word separators of legitimate packages, e.g. hyphens or underscores (for example \"setup-tools\" instead of \"setuptools\").",
    "Impact": "Create name confusion, resulting in the installation of a malicious package",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-204",
  "avName": "Typosquatting",
  "info": [
   {
    "Description": "Typosquatting is a technique originally known in the context of Website domains, and relies on mistakes such as typographical errors made by users when entering a website address into a web browser. In this context, the attacker exploits that users mistype names of legitimate packages during installation or when declaring dependencies.",
    "Impact": "Create name confusion, resulting in the installation of a malicious package",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-205",
  "avName": "Built-in Package",
  "info": [
   {
    "Description": "By creating a package whose name is identical to a built-in package (or module, class, function, etc.) of the respective programming language or ecosystem (for example \"subprocess\" for Python), a victim can be tricked into downloading and installing the malicious package through the package manager rather than using built-in functionality.",
    "Impact": "Create name confusion, resulting in the installation of a malicious package",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-206",
  "avName": "Brandjacking",
  "info": [
   {
    "Description": "This technique consists of crafting package names that create the impression of coming from a trustworthy author or entity, e.g. by using the same prefix as legitimate packages from such author (e.g. \"aws-\").",
    "Impact": "Create name confusion, resulting in the installation of a malicious package",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-207",
  "avName": "Similarity Attack",
  "info": [
   {
    "Description": "This technique covers misleading or similar names that do not fall in any other category of name confusion attacks.",
    "Impact": "Create name confusion, resulting in the installation of a malicious package",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-208",
  "avName": "Omitting Scope or Namespace",
  "info": [
   {
    "Description": "This technique consists of taking the name of a package with scope (or namespace) and publishing it without the scope.",
    "Impact": "Create name confusion, resulting in the installation of a malicious package",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-209",
  "avName": "AI Package Hallucination",
  "info": [
   {
    "Description": "Generative AI platforms, such as ChatGPT, have the capability to generate responses and recommendations based on the patterns and information learned during training. While these platforms provide valuable assistance, it's important to note that the responses generated may not always align with reality and can include elements that do not exist. <br>In the context of coding tasks, developers may seek recommendations for packages that can solve their specific needs. However, the generative AI model might suggest packages that are not actually present in legitimate package repositories like NPM or PyPI. This creates an opportunity for attackers to exploit the platform by crafting questions that prompt the AI to generate non-existent package names. <br>The intention of such an attack would be to deceive developers who rely on the generative AI's recommendations. The attackers could then publish malicious packages under these fabricated names, leading unsuspecting developers into using them. ",
    "Impact": "Create name confusion, resulting in the installation of a malicious package",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-509",
  "avName": "Abuse Dependency Resolution Mechanism",
  "info": [
   {
    "Description": "Most package managers implement a dependency resolution strategy, which decides which package version has to be downloaded, where to download from and the order of precedence when contacting multiple repositories. The specific implementation of such resolution mechanism and its configuration determines about the number and order of repositories to be queried, hence the use of mirrors. For instance, it can happen that packages in public repositories take precendence over internal, proprietary packages in internal repositories. This latter is also known as \"dependency confusion\".  In other words, the internal package is \"masked\" by the public one. As another example, it can happen that a public repository not provisioned by the legitimate project maintainers takes precedence.<br><br>Generally speaking, every abuse of the dependency resolution strategy would result in the installation of a package version that could not match the intended one, but the one deployed in an alternative repository or mirror.",
    "Impact": "Installation of malicious package",
    "Mapped Safeguard": [
     {
      "sgId": "SG-030"
     }
    ]
   }
  ]
 },
 {
  "avId": "AV-600",
  "avName": "Compromise User (Project Maintainer/Administrator)",
  "info": [
   {
    "Description": "A malicious actor may impersonate a valid account of a package maintainer, of a build system or hosting system administrator and so on, to inject malicious code and eventually conduct a supply chain attack. An attacker that is able to impersonate a legitimate user, would be able to bypass access controls on sensitive resources.",
    "Impact": "Unauthorized access and/or modification of sensitive information and/or protected resources.",
    "Mapped Safeguard": [
     {
      "sgId": "SG-022"
     }
    ]
   }
  ]
 },
 {
  "avId": "AV-601",
  "avName": "Bribe or Blackmail Legitimate User",
  "info": [
   {
    "Description": "An attacker may blackmail or corrupt a legitimate user to force him to inject malicious code or include weaknesses.",
    "Impact": "Corruption of legitimate user and disruption of user trust",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-602",
  "avName": "Take-over Legitimate Account",
  "info": [
   {
    "Description": "By taking over a legitimate account, an attacker is able to impersonate a legitimate user and to conduct malicious operations on behalf of him/her.",
    "Impact": "Unauthorized access and/or modification of sensitive information and/or protected resources.",
    "Mapped Safeguard": [
     {
      "sgId": "SG-017"
     },
     {
      "sgId": "SG-018"
     },
     {
      "sgId": "SG-019"
     },
     {
      "sgId": "SG-020"
     },
     {
      "sgId": "SG-021"
     }
    ]
   }
  ]
 },
 {
  "avId": "AV-603",
  "avName": "Reuse of Compromised Credentials",
  "info": [
   {
    "Description": "An attacker can conduct information gathering campaigns using OSINT tools, published compromised credentials after data breaches and so on, to obtain valid credentials for high-profile users (e.g., administrators) .The usage of valid and compromised credentials would allow a malicious user to access source code repositories, build systems, configuration files etc. to eventually inject malicious code.",
    "Impact": "Unauthorized access and/or modification of sensitive information and/or protected resources.",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-604",
  "avName": "Bruteforce",
  "info": [
   {
    "Description": "Bruteforce is a technique to compromise a user account by trying all the possible combinations of username and password, for example, to eventually find the exact match granting him unauthorized access.",
    "Impact": "Unauthorized access and/or modification of sensitive information and/or protected resources.",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-605",
  "avName": "Reuse of Leaked API Tokens",
  "info": [
   {
    "Description": "In their strive for build automation, developers sometimes disclose sensitive credentials, e.g., API tokens, in the project's source code repository. Attackers getting hold of such credentials can impersonate the owner, e.g., in order to inject malicious code or sign software artifacts.",
    "Impact": "Unauthorized access and/or modification of sensitive information and/or protected resources.",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-606",
  "avName": "Social Engineering to Obtain Credentials",
  "info": [
   {
    "Description": "Social engineering (SE) consists of a series of malicious activities accomplished through human interactions and uses psychological manipulation to trick users into making security mistakes or giving away sensitive information. In our particular scope, a SE attack aims at obtaining the credentials of a privileged user, e.g. project maintainer or build system administrator.",
    "Impact": "Unauthorized access and/or modification of sensitive information and/or protected resources.",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-607",
  "avName": "Reuse of Existing Session",
  "info": [
   {
    "Description": "This technique aims to disrupt the authentication mechanism of a system through session IDs (e.g., tokens, cookies etc.) or piggybacking on existing sessions (e.g. similarly in XSRF). An attacker that is able to hijack such sessions will be able to gain privileges of the targeted user.",
    "Impact": "Session hijacking and Gain of Privileges",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-608",
  "avName": "Resurrect Expired Domain Associated With Legitimate Account",
  "info": [
   {
    "Description": "Project maintainers may use email addresses for their VCS, build system or distribution platform that have expired domains. Thus, an attacker can buy such domain, log into the targeted system and change the password for that account. In such a way the attacker is able to compromise the project unless two-factor authentication is enabled.",
    "Impact": "Gain of administrative privileges",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-801",
  "avName": "Change Ethos",
  "info": [
   {
    "Description": "Project maintainers may change their behavior from benign and ethical to malicious and unethical. Possible intrinsic motivations for such changes are to express political beliefs or dissatifaction about stakeholder behavior, e.g., harassment or lack of user support/contributions. In such cases, a formerly benign maintainer turns into the attacker.",
    "Impact": "Benign maintainer turns into attacker",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-800",
  "avName": "Become Maintainer",
  "info": [
   {
    "Description": "An attacker convinces or tricks a legitimate Project Maintainer (using social engineering techniques) to provide him or her aditional permissions, thus, to promote the attacker to a maintainer or even project owner. As a result, the attacker receives (higher) privileges for project-related resources, e.g., the source code repository, the build system or the Administrator. Many open-source projects are anyways short on resources (cf. https://www.codeshelter.co/ or https://jazzband.co), and sometimes the original maintainers simply cannot or do not want to continue project maintenance anymore, both of which makes such projects prone for these social-engineering attacks.",
    "Impact": "Gain of privileges",
    "Mapped Safeguard": []
   }
  ]
 }
]