[
 {
  "avId": "AV-300",
  "avName": "Inject Into Sources of Legitimate Package",
  "info": [
   {
    "Description": "This attack vector aims at injecting malicious code into the versioning control system of a legitimate project. Consequently, every user or system building the software from the sources will be affected by the attack, and - as far as this is the attackers intention - produce a binary package including the malicious code. Of course, this also comprises the project's standard build system producing the binary that will be distributed through the project's standard distribution mechanism, e.g., package repositories like Maven Central or npm. In other words, for the attacker, this technique has the advantage that all downstream users are affected, no matter whether they consume sources or pre-built binary artifacts. On the other hand, being part of the project's code base makes it easier to spot malicious code, e.g. through code reviews.",
    "Impact": "Execute Unauthorized Code",
    "Mapped Safeguard": [
     {
      "sgId": "SG-004"
     }
    ]
   }
  ]
 },
 {
  "avId": "AV-301",
  "avName": "Introduce Malicious Code through Hypocrite Merge Request",
  "info": [
   {
    "Description": "Attackers can pretend to make a useful, seemingly benign contribution to a project while in fact submitting malicious code. For example, the contribution can pretend to introduce new functionality, test cases, CI/CD automation or documentation. Contributions for some of those topics may be reviewed with less scrutiny by legitimate project maintainers, which may be exploited by attackers. The malicious code itself can expose malicious behavior (e.g., a dropper) or be a deliberate vulnerability, which can be exploited at later stages. It can be included in project code or hidden in newly introduced dependencies.",
    "Impact": "Acceptance of malicious code from package maintainer",
    "Mapped Safeguard": [
     {
      "sgId": "SG-015"
     },
     {
      "sgId": "SG-016"
     }
    ]
   }
  ]
 },
 {
  "avId": "AV-302",
  "avName": "Contribute as Maintainer",
  "info": [
   {
    "Description": "The attacker obtains the permissions of a legitimate project maintainer to commit and push malicious code to the code base of the targeted project, directly or through pull/merge requests, depending on the project's development practice. The child nodes of this technique differ in regards to how those permissions are obtained.",
    "Impact": "Injection of malicious code into a legitimate software component",
    "Mapped Safeguard": [
     {
      "sgId": "SG-015"
     },
     {
      "sgId": "SG-016"
     },
     {
      "sgId": "SG-022"
     }
    ]
   }
  ]
 },
 {
  "avId": "AV-303",
  "avName": "Tamper with Version Control System",
  "info": [
   {
    "Description": "Open-source based software development relies on multiple systems, many of which are accessible online, e.g., source code repositories or build systems. Those systems can be subject to vulnerabilities, require secure configuration settings and come with privileged administrator accounts. In this specific case, the modification of a legitimate package, plugin or configuration file to include something malicious could be achieved by attacking the version control system on which such files are stored. Though the majority of open-source projects is hosted on GitHub or GitLab cloud services, some projects and open-source foundations still operate their own versioning control system.",
    "Impact": "Modification of source code to include security flaws or malicious code",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-304",
  "avName": "Make Immature Vulnerability Exploitable",
  "info": [
   {
    "Description": "A vulnerability could be introduced in a project through a small patch to fix a minor issue, which actually introduces the remaining conditions of a so-called immature vulnerability. This technique requires to analyze the project's code base beforehand to identify those immature vulnerabilities. Presumably, this technique is particularly geared towards creating backdoors in existing project capabilities. On the other hand, the addition of larger code chunks, e.g. to download and run second stage payload, can hardly be achieved using this technique.",
    "Impact": "Acceptance of malicious code from package maintainer",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-305",
  "avName": "Exploit Rendering Weakness",
  "info": [
   {
    "Description": "This technique exploits rendering weaknesses of user interfaces to hide malicious code such that it can hardly be spotted (if at all) during manual code or merge request reviews. Possible techniques include the misuse of Unicode's Bidi Algorithm or the manual tampering with large files that are typically created in some automated fashion.",
    "Impact": "Acceptance of malicious code from package maintainer",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-306",
  "avName": "Exploit Unicode Bidirectional Algorithm",
  "info": [
   {
    "Description": "The Unicode Bidirectional algorithm (a.k.a. Bidi) supports left-to-right and right-to-left text encodings. In particular, Bidi uses override control characters, which are invisible characters that enable switching the display ordering of groups of characters (e.g. U+202A is the Left-to-Right Embedding, U+202B is the Right-to-Left Embedding). An attacker may inject Unicode Bidi override characters into comments or strings to produce syntactically - valid source codes, but that hide semantically different codes(and potentially malicious).Possible expoits may perform early - returns, commenting - out or stretched strings (i.e. text that appears to be outside a string literal but that it is actually located within it).",
    "Impact": "Acceptance of malicious code from package maintainer",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-307",
  "avName": "Use Homoglyphs",
  "info": [
   {
    "Description": "Homoglyphs are characters that looks similar (if not the same), but are encoded and processed differently. An example is the Latin 'H' and the Cyrillic 'En' (i.e. \u041d). An attacker may define a malicious version of a function with apparently the same name - but exploiting homoglyphs - such that it will be invoked by the disguised user.",
    "Impact": "Acceptance of malicious code from package maintainer",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-308",
  "avName": "Prevent Display of File Differences",
  "info": [
   {
    "Description": "The attacker opens a pull request containing the malicious code for the targeted project, hoping that legitimate project maintainers will not notice it during the review and approval workflow. To increase chances that the malicious pull/merge request gets approved and merged into the project's code base, the attacker can build some trust beforehand, e.g., by submitting some benign contribution, or use techniques to hide or surpress the display of the malicious code in the approval workflow (a.k.a. pull request sneaking). In this particular case, the attacker may use special characters (e.g., the null character), such that the text editor will interprete them and the file difference will not be displayed.",
    "Impact": "Acceptance of malicious code from package maintainer",
    "Mapped Safeguard": [
     {
      "sgId": "SG-015"
     },
     {
      "sgId": "SG-016"
     }
    ]
   }
  ]
 },
 {
  "avId": "AV-309",
  "avName": "Hide in Generated/Compiled/Minified Code",
  "info": [
   {
    "Description": "The attacker opens a pull/merge request containing the malicious code for the targeted project, hoping that legitimate project maintainers will not notice it during the review and approval workflow. To increase chances that the malicious PR gets approved and merged into the project's code base, the attacker can build some trust beforehand, e.g. by submitting benign contributions, or use techniques to hide or surpress the display of the malicious code in the approval workflow (a.k.a. pull request sneaking). In this particular case, the attacker may inject malicious code in generated/compiled/minified code, such that it would be hard to detect by the human code reviewer.",
    "Impact": "Acceptance of malicious code from package maintainer",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-700",
  "avName": "Compromise  System",
  "info": [
   {
    "Description": "By compromising a VCS system, a package hosting system or a build system, an attacker would be able, respectively, to inject malicious source code, a malicious version of a package or to infect a software product during its build process.",
    "Impact": "Unauthorized access to system information or functionality. System compromise.",
    "Mapped Safeguard": [
     {
      "sgId": "SG-042",
      "scopeAvId": "AV-403"
     }
    ]
   }
  ]
 },
 {
  "avId": "AV-701",
  "avName": "Exploit Weak Configuration",
  "info": [
   {
    "Description": "Weaknesses in configuration can happen at any level of the stack: Network services, OS level, web server, database etc. Such misconfigurations can be used by an attacker as an entry point to gain unauthorized access to sensitive resources or, depending on his/her level of privileges, could allow him also to modify resources (e.g., packages hosted in a Administrator).",
    "Impact": "Unauthorized access to system information or functionality. System compromise.",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-702",
  "avName": "Exploit Vulnerabilities",
  "info": [
   {
    "Description": "When a service is publicly exposed, an attacker may be able to find and exploit (known and unknown) software vulnerabilities to gain access to the host machine, allowing him/her unauthorized access to sensitive resources.",
    "Impact": "Unauthorized access to system information or functionality. System compromise.",
    "Mapped Safeguard": []
   }
  ]
 },
 {
  "avId": "AV-703",
  "avName": "Infect through Malicious Component",
  "info": [
   {
    "Description": "Many systems used throughout software development are open-source themselves, e.g., plugins for Jenkins, Maven or Visual Studio Code, or integrate open-source components. A compromised build tool, for instance, can infect any software built using that tool, along the lines of the famous 'Reflections on Trusting Trust' from K. Thompson. The infection of components through the infection of open-source used during development, build and distribution threby corresponds to the recursive application of the attack tree.",
    "Impact": "",
    "Mapped Safeguard": []
   }
  ]
 }
]